import { createRequest as e, stringifyVariables as t, Client as n } from "@urql/core";

export * from "@urql/core";

import { writable as r } from "svelte/store";

import { getContext as i, setContext as o, onDestroy as u } from "svelte";

import { subscribe as a, scan as c, switchMap as s, fromValue as f, concat as l, map as v, make as b, toPromise as p, take as x } from "wonka";

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var n = arguments[t];
      for (var r in n) {
        if (Object.prototype.hasOwnProperty.call(n, r)) {
          e[r] = n[r];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

var d = new WeakSet;

var y = "production" !== process.env.NODE_ENV ? function(e) {
  return d.add(e);
} : function() {
  return;
};

function operationStore(n, i, o) {
  var u = {
    query: n,
    variables: i || null,
    context: o
  };
  var a = {
    stale: !1,
    fetching: !1,
    data: void 0,
    error: void 0,
    extensions: void 0
  };
  var c = r(a);
  var s = !1;
  a.set = function set(n) {
    if (!n || n === a) {
      return;
    }
    s = !0;
    if ("production" !== process.env.NODE_ENV) {
      if (!d.has(n)) {
        for (var r in n) {
          if (!(r in u)) {
            throw new TypeError("It is not allowed to update result properties on an OperationStore.");
          }
        }
      }
    }
    var i = !1;
    if ("query" in n || "variables" in n) {
      var o = e(u.query, u.variables);
      var f = e(n.query || u.query, n.variables || u.variables);
      if (o.key !== f.key) {
        i = !0;
        u.query = n.query || u.query;
        u.variables = n.variables || u.variables || null;
      }
    }
    if ("context" in n) {
      if (t(u.context) !== t(n.context)) {
        i = !0;
        u.context = n.context;
      }
    }
    for (var l in n) {
      if ("query" === l || "variables" === l || "context" === l) {
        continue;
      } else if ("fetching" === l) {
        a[l] = !!n[l];
      } else if (l in a) {
        a[l] = n[l];
      }
      i = !0;
    }
    a.stale = !!n.stale;
    s = !1;
    if (i) {
      c.set(a);
    }
  };
  a.update = function update(e) {
    a.set(e(a));
  };
  a.subscribe = function subscribe(e, t) {
    return c.subscribe(e, t);
  };
  a.reexecute = function(e) {
    u.context = _extends({}, e || u.context);
    c.set(a);
  };
  Object.keys(u).forEach((function(e) {
    Object.defineProperty(a, e, {
      configurable: !1,
      get: function() {
        return u[e];
      },
      set: function set(t) {
        u[e] = t;
        if (!s) {
          c.set(a);
        }
      }
    });
  }));
  if ("production" !== process.env.NODE_ENV) {
    var f = _extends({}, a);
    Object.keys(a).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function get() {
          return a[e];
        },
        set: function set() {
          throw new TypeError("It is not allowed to update result properties on an OperationStore.");
        }
      });
    }));
    Object.keys(u).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function() {
          return u[e];
        },
        set: function set(t) {
          u[e] = t;
          if (!s) {
            c.set(a);
          }
        }
      });
    }));
    return f;
  }
  return a;
}

function getClient() {
  return i("$$_urql");
}

function setClient(e) {
  o("$$_urql", e);
}

function initClient(e) {
  var t = new n(e);
  setClient(t);
  return t;
}

var g = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0
};

function toSource(t) {
  return b((function(n) {
    var r;
    var i = {};
    return t.subscribe((function(t) {
      var o = e(t.query, t.variables);
      if ((o.context = t.context) !== i || o.key !== r) {
        r = o.key;
        i = t.context;
        n.next(o);
      }
    }));
  }));
}

function query(e) {
  var t = getClient();
  var n = a((function(t) {
    y(t);
    e.set(t);
  }))(c((function(e, t) {
    return _extends({}, e, t);
  }), g)(s((function(e) {
    if (e.context && e.context.pause) {
      return f({
        fetching: !1,
        stale: !1
      });
    }
    return l([ f({
      fetching: !0,
      stale: !1
    }), v((function(e) {
      return _extends({}, {
        fetching: !1
      }, e, {
        stale: !!e.stale
      });
    }))(t.executeQuery(e, e.context)), f({
      fetching: !1,
      stale: !1
    }) ]);
  }))(toSource(e))));
  u(n.unsubscribe);
  return e;
}

function subscription(e, t) {
  var n = getClient();
  var r = a((function(t) {
    y(t);
    e.set(t);
  }))(c((function(e, n) {
    return _extends({}, e, n, {
      data: void 0 !== n.data ? "function" == typeof t ? t(e.data, n.data) : n.data : e.data,
      stale: !1
    });
  }), g)(s((function(t) {
    if (t.context && t.context.pause) {
      return f({
        fetching: !1
      });
    }
    return l([ f({
      fetching: !0
    }), n.executeSubscription(t, e.context), f({
      fetching: !1
    }) ]);
  }))(toSource(e))));
  u(r.unsubscribe);
  return e;
}

function mutation(t) {
  var n = getClient();
  var r = "function" != typeof t.subscribe ? operationStore(t.query, t.variables) : t;
  return function(t, i) {
    var o = {
      fetching: !0,
      variables: t || r.variables,
      context: i || r.context
    };
    y(o);
    r.set(o);
    return p(x(1)(n.executeMutation(e(r.query, r.variables || {}), r.context))).then((function(e) {
      var t = _extends({}, {
        fetching: !1
      }, e);
      y(t);
      r.set(t);
      return r;
    }));
  };
}

export { getClient, initClient, mutation, operationStore, query, setClient, subscription };
//# sourceMappingURL=urql-svelte.mjs.map
