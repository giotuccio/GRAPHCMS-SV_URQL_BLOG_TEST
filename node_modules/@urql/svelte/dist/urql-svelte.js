var e = require("@urql/core");

var t = require("svelte/store");

var r = require("svelte");

var n = require("wonka");

function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var t = 1; t < arguments.length; t++) {
      var r = arguments[t];
      for (var n in r) {
        if (Object.prototype.hasOwnProperty.call(r, n)) {
          e[n] = r[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}

var i = new WeakSet;

var o = "production" !== process.env.NODE_ENV ? function(e) {
  return i.add(e);
} : function() {
  return;
};

function operationStore(r, n, o) {
  var a = {
    query: r,
    variables: n || null,
    context: o
  };
  var u = {
    stale: !1,
    fetching: !1,
    data: void 0,
    error: void 0,
    extensions: void 0
  };
  var s = t.writable(u);
  var c = !1;
  u.set = function set(t) {
    if (!t || t === u) {
      return;
    }
    c = !0;
    if ("production" !== process.env.NODE_ENV) {
      if (!i.has(t)) {
        for (var r in t) {
          if (!(r in a)) {
            throw new TypeError("It is not allowed to update result properties on an OperationStore.");
          }
        }
      }
    }
    var n = !1;
    if ("query" in t || "variables" in t) {
      var o = e.createRequest(a.query, a.variables);
      var f = e.createRequest(t.query || a.query, t.variables || a.variables);
      if (o.key !== f.key) {
        n = !0;
        a.query = t.query || a.query;
        a.variables = t.variables || a.variables || null;
      }
    }
    if ("context" in t) {
      if (e.stringifyVariables(a.context) !== e.stringifyVariables(t.context)) {
        n = !0;
        a.context = t.context;
      }
    }
    for (var l in t) {
      if ("query" === l || "variables" === l || "context" === l) {
        continue;
      } else if ("fetching" === l) {
        u[l] = !!t[l];
      } else if (l in u) {
        u[l] = t[l];
      }
      n = !0;
    }
    u.stale = !!t.stale;
    c = !1;
    if (n) {
      s.set(u);
    }
  };
  u.update = function update(e) {
    u.set(e(u));
  };
  u.subscribe = function subscribe(e, t) {
    return s.subscribe(e, t);
  };
  u.reexecute = function(e) {
    a.context = _extends({}, e || a.context);
    s.set(u);
  };
  Object.keys(a).forEach((function(e) {
    Object.defineProperty(u, e, {
      configurable: !1,
      get: function() {
        return a[e];
      },
      set: function set(t) {
        a[e] = t;
        if (!c) {
          s.set(u);
        }
      }
    });
  }));
  if ("production" !== process.env.NODE_ENV) {
    var f = _extends({}, u);
    Object.keys(u).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function get() {
          return u[e];
        },
        set: function set() {
          throw new TypeError("It is not allowed to update result properties on an OperationStore.");
        }
      });
    }));
    Object.keys(a).forEach((function(e) {
      Object.defineProperty(f, e, {
        configurable: !1,
        get: function() {
          return a[e];
        },
        set: function set(t) {
          a[e] = t;
          if (!c) {
            s.set(u);
          }
        }
      });
    }));
    return f;
  }
  return u;
}

function getClient() {
  return r.getContext("$$_urql");
}

function setClient(e) {
  r.setContext("$$_urql", e);
}

var a = {
  fetching: !1,
  stale: !1,
  error: void 0,
  data: void 0,
  extensions: void 0
};

function toSource(t) {
  return n.make((function(r) {
    var n;
    var i = {};
    return t.subscribe((function(t) {
      var o = e.createRequest(t.query, t.variables);
      if ((o.context = t.context) !== i || o.key !== n) {
        n = o.key;
        i = t.context;
        r.next(o);
      }
    }));
  }));
}

exports.getClient = getClient;

exports.initClient = function initClient(t) {
  var r = new e.Client(t);
  setClient(r);
  return r;
};

exports.mutation = function mutation(t) {
  var r = getClient();
  var i = "function" != typeof t.subscribe ? operationStore(t.query, t.variables) : t;
  return function(t, a) {
    var u = {
      fetching: !0,
      variables: t || i.variables,
      context: a || i.context
    };
    o(u);
    i.set(u);
    return n.toPromise(n.take(1)(r.executeMutation(e.createRequest(i.query, i.variables || {}), i.context))).then((function(e) {
      var t = _extends({}, {
        fetching: !1
      }, e);
      o(t);
      i.set(t);
      return i;
    }));
  };
};

exports.operationStore = operationStore;

exports.query = function query(e) {
  var t = getClient();
  var i = n.subscribe((function(t) {
    o(t);
    e.set(t);
  }))(n.scan((function(e, t) {
    return _extends({}, e, t);
  }), a)(n.switchMap((function(e) {
    if (e.context && e.context.pause) {
      return n.fromValue({
        fetching: !1,
        stale: !1
      });
    }
    return n.concat([ n.fromValue({
      fetching: !0,
      stale: !1
    }), n.map((function(e) {
      return _extends({}, {
        fetching: !1
      }, e, {
        stale: !!e.stale
      });
    }))(t.executeQuery(e, e.context)), n.fromValue({
      fetching: !1,
      stale: !1
    }) ]);
  }))(toSource(e))));
  r.onDestroy(i.unsubscribe);
  return e;
};

exports.setClient = setClient;

exports.subscription = function subscription(e, t) {
  var i = getClient();
  var u = n.subscribe((function(t) {
    o(t);
    e.set(t);
  }))(n.scan((function(e, r) {
    return _extends({}, e, r, {
      data: void 0 !== r.data ? "function" == typeof t ? t(e.data, r.data) : r.data : e.data,
      stale: !1
    });
  }), a)(n.switchMap((function(t) {
    if (t.context && t.context.pause) {
      return n.fromValue({
        fetching: !1
      });
    }
    return n.concat([ n.fromValue({
      fetching: !0
    }), i.executeSubscription(t, e.context), n.fromValue({
      fetching: !1
    }) ]);
  }))(toSource(e))));
  r.onDestroy(u.unsubscribe);
  return e;
};

Object.keys(e).forEach((function(t) {
  if ("default" !== t && !exports.hasOwnProperty(t)) {
    exports[t] = e[t];
  }
}));
//# sourceMappingURL=urql-svelte.js.map
