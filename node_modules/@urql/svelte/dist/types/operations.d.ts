import { OperationContext, TypedDocumentNode } from '@urql/core';
import { OperationStore } from './operationStore';
import { DocumentNode } from 'graphql';
export declare function query<Data = any, Variables = object>(store: OperationStore<Data, Variables>): OperationStore<Data, Variables>;
export declare type SubscriptionHandler<T, R> = (prev: R | undefined, data: T) => R;
export declare function subscription<Data = any, Result = Data, Variables = object>(store: OperationStore<Data, Variables, any>, handler?: SubscriptionHandler<Data, Result>): OperationStore<Data, Variables, Result>;
export declare type ExecuteMutation<Data = any, Variables = object> = (variables?: Variables, context?: Partial<OperationContext>) => Promise<OperationStore<Data, Variables>>;
interface GraphQLRequestInput<Data = any, Variables = object> {
    key?: number;
    query: DocumentNode | TypedDocumentNode<Data, Variables> | string;
    variables?: Variables;
}
export declare function mutation<Data = any, Variables = object>(input: GraphQLRequestInput<Data, Variables> | OperationStore<Data, Variables>): ExecuteMutation<Data, Variables>;
export {};
