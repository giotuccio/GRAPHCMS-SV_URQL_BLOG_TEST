import { Readable } from 'svelte/store';
import { DocumentNode } from 'graphql';
import { TypedDocumentNode } from '@graphql-typed-document-node/core';
import { OperationContext, CombinedError } from '@urql/core';
declare type Updater<T> = (value: T) => T;
/**
 * This Svelte store wraps both a `GraphQLRequest` and an `OperationResult`.
 * It can be used to update the query and read the subsequent result back.
 */
export interface OperationStore<Data = any, Vars = any, Result = Data> extends Readable<OperationStore<Data, Vars, Result>> {
    query: DocumentNode | TypedDocumentNode<Data, Vars> | string;
    variables: Vars | null;
    context: Partial<OperationContext & {
        pause: boolean;
    }> | undefined;
    readonly stale: boolean;
    readonly fetching: boolean;
    readonly data: Result | undefined;
    readonly error: CombinedError | undefined;
    readonly extensions: Record<string, any> | undefined;
    set(value: Partial<OperationStore<Data, Vars, Result>>): void;
    update(updater: Updater<Partial<OperationStore<Data, Vars, Result>>>): void;
    reexecute(context?: Partial<OperationContext> | undefined): void;
}
export declare function operationStore<Data = any, Vars = object, Result = Data>(query: string | DocumentNode | TypedDocumentNode<Data, Vars>, variables?: Vars | null, context?: Partial<OperationContext & {
    pause: boolean;
}>): OperationStore<Data, Vars, Result>;
export {};
