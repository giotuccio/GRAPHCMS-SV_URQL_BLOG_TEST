import "./chunk-3BQGYF6B.js";
import {
  GraphQLError,
  parse
} from "./chunk-42OEGKFX.js";
import {
  Kind,
  init_kinds,
  init_printer,
  init_visitor,
  print,
  visit
} from "./chunk-X5STHKUC.js";
import {
  writable
} from "./chunk-BSFEWEIJ.js";
import {
  getContext,
  onDestroy,
  setContext
} from "./chunk-GMPGJH4D.js";
import "./chunk-VP3FZ6LR.js";

// node_modules/@urql/core/dist/urql-core.mjs
init_visitor();
init_kinds();
init_printer();

// node_modules/@urql/core/dist/01e1547d.mjs
init_kinds();
init_printer();

// node_modules/wonka/dist/wonka.mjs
function l(a2, b) {
  b.tag = a2;
  return b;
}
function m() {
}
function p(a2) {
  return function(b) {
    var c2 = a2.length;
    let d2 = false, e = false, f2 = false, g2 = 0;
    b(l(0, [
      function(h2) {
        if (h2) {
          d2 = true;
        } else if (e) {
          f2 = true;
        } else {
          for (e = f2 = true; f2 && !d2; ) {
            g2 < c2 ? (h2 = a2[g2], g2 = g2 + 1 | 0, f2 = false, b(l(1, [h2]))) : (d2 = true, b(0));
          }
          e = false;
        }
      }
    ]));
  };
}
function r() {
}
function t(a2) {
  a2(0);
}
function u(a2) {
  let b = false;
  a2(l(0, [
    function(c2) {
      c2 ? b = true : b || a2(0);
    }
  ]));
}
function x(a2) {
  if (a2 === null || a2[0] !== v) {
    return a2;
  }
  if ((a2 = a2[1]) !== 0) {
    return [v, a2 - 1 | 0];
  }
}
function z(a2) {
  return function(b) {
    return function(c2) {
      function d2(b2) {
        typeof b2 == "number" ? k && (k = false, (b2 = e.shift()) !== void 0 ? (b2 = a2(x(b2)), k = true, b2(d2)) : q ? c2(0) : g2 || (g2 = true, f2(0))) : b2.tag ? k && (c2(b2), n ? n = false : h2(0)) : (h2 = b2 = b2[0], n = false, b2(0));
      }
      let e = [], f2 = m, g2 = false, h2 = m, k = false, n = false, q = false;
      b(function(b2) {
        typeof b2 == "number" ? q || (q = true, k || e.length !== 0 || c2(0)) : b2.tag ? q || (b2 = b2[0], g2 = false, k ? e.push(b2) : (b2 = a2(b2), k = true, b2(d2))) : f2 = b2[0];
      });
      c2(l(0, [
        function(c3) {
          if (c3) {
            if (q || (q = true, f2(1)), k) {
              return k = false, h2(1);
            }
          } else {
            q || g2 || (g2 = true, f2(0)), k && !n && (n = true, h2(0));
          }
        }
      ]));
    };
  };
}
function B(a2) {
  return a2;
}
function C(a2) {
  return a2(0);
}
function D(a2) {
  return function(b) {
    return function(c2) {
      let e = m, f2 = false, g2 = [], h2 = false;
      b(function(b2) {
        typeof b2 == "number" ? h2 || (h2 = true, g2.length === 0 && c2(0)) : b2.tag ? h2 || (f2 = false, function(a3) {
          function b3(a4) {
            typeof a4 == "number" ? g2.length !== 0 && (g2 = g2.filter(d2), a4 = g2.length === 0, h2 && a4 ? c2(0) : !f2 && a4 && (f2 = true, e(0))) : a4.tag ? g2.length !== 0 && (c2(l(1, [a4[0]])), k(0)) : (k = a4 = a4[0], g2 = g2.concat(a4), a4(0));
          }
          function d2(a4) {
            return a4 !== k;
          }
          let k = m;
          a3.length === 1 ? a3(b3) : a3.bind(null, b3);
        }(a2(b2[0])), f2 || (f2 = true, e(0))) : e = b2[0];
      });
      c2(l(0, [
        function(a3) {
          a3 ? (h2 || (h2 = true, e(a3)), g2.forEach(function(c3) {
            return c3(a3);
          }), g2 = []) : (f2 || h2 ? f2 = false : (f2 = true, e(0)), g2.forEach(C));
        }
      ]));
    };
  };
}
function E(a2) {
  return a2;
}
function H(a2) {
  return function(b) {
    return function(c2) {
      let d2 = false;
      return b(function(e) {
        if (typeof e == "number") {
          d2 || (d2 = true, c2(e));
        } else if (e.tag) {
          d2 || (a2(e[0]), c2(e));
        } else {
          var g2 = e[0];
          c2(l(0, [
            function(a3) {
              if (!d2) {
                return a3 && (d2 = true), g2(a3);
              }
            }
          ]));
        }
      });
    };
  };
}
function J(a2) {
  a2(0);
}
function K(a2) {
  return function(b) {
    return function(c2) {
      function d2(a3) {
        h2 && (typeof a3 == "number" ? (h2 = false, n ? c2(a3) : f2 || (f2 = true, e(0))) : a3.tag ? (c2(a3), k ? k = false : g2(0)) : (g2 = a3 = a3[0], k = false, a3(0)));
      }
      let e = m, f2 = false, g2 = m, h2 = false, k = false, n = false;
      b(function(b2) {
        typeof b2 == "number" ? n || (n = true, h2 || c2(0)) : b2.tag ? n || (h2 && (g2(1), g2 = m), f2 ? f2 = false : (f2 = true, e(0)), b2 = a2(b2[0]), h2 = true, b2(d2)) : e = b2[0];
      });
      c2(l(0, [
        function(a3) {
          if (a3) {
            if (n || (n = true, e(1)), h2) {
              return h2 = false, g2(1);
            }
          } else {
            n || f2 || (f2 = true, e(0)), h2 && !k && (k = true, g2(0));
          }
        }
      ]));
    };
  };
}
function M(a2) {
  return function(b) {
    return function(c2) {
      let d2 = [], e = m;
      return b(function(b2) {
        typeof b2 == "number" ? p(d2)(c2) : b2.tag ? (d2.length >= a2 && 0 < a2 && d2.shift(), d2.push(b2[0]), e(0)) : (b2 = b2[0], 0 >= a2 ? (b2(1), u(c2)) : (e = b2, b2(0)));
      });
    };
  };
}
function N(a2) {
  return function(b) {
    let c2 = m, d2 = false;
    b(function(e) {
      typeof e == "number" ? d2 = true : e.tag ? d2 || (a2(e[0]), c2(0)) : (c2 = e = e[0], e(0));
    });
    return {
      unsubscribe: function() {
        if (!d2) {
          return d2 = true, c2(1);
        }
      }
    };
  };
}
function O() {
}
function concat$1(a2) {
  return z(B)(p(a2));
}
function filter$1(a2) {
  return function(b) {
    return function(c2) {
      let d2 = m;
      return b(function(b2) {
        typeof b2 == "number" ? c2(b2) : b2.tag ? a2(b2[0]) ? c2(b2) : d2(0) : (d2 = b2[0], c2(b2));
      });
    };
  };
}
function fromValue$1(a2) {
  return function(b) {
    let c2 = false;
    b(l(0, [
      function(d2) {
        d2 ? c2 = true : c2 || (c2 = true, b(l(1, [a2])), b(0));
      }
    ]));
  };
}
function make$1(a2) {
  return function(b) {
    let c2 = r, d2 = false;
    c2 = a2({
      next: function(a3) {
        d2 || b(l(1, [a3]));
      },
      complete: function() {
        d2 || (d2 = true, b(0));
      }
    });
    b(l(0, [
      function(a3) {
        if (a3 && !d2) {
          return d2 = true, c2();
        }
      }
    ]));
  };
}
function makeSubject$1() {
  let a2 = [], b = false;
  return {
    source: function(c2) {
      function b2(a3) {
        return a3 !== c2;
      }
      a2 = a2.concat(c2);
      c2(l(0, [
        function(c3) {
          c3 && (a2 = a2.filter(b2));
        }
      ]));
    },
    next: function(c2) {
      b || a2.forEach(function(a3) {
        a3(l(1, [c2]));
      });
    },
    complete: function() {
      b || (b = true, a2.forEach(t));
    }
  };
}
function map$1(a2) {
  return function(b) {
    return function(c2) {
      return b(function(b2) {
        b2 = typeof b2 == "number" ? 0 : b2.tag ? l(1, [a2(b2[0])]) : l(0, [b2[0]]);
        c2(b2);
      });
    };
  };
}
function merge$1(a2) {
  return D(E)(p(a2));
}
function onEnd$1(a2) {
  return function(b) {
    return function(c2) {
      let d2 = false;
      return b(function(b2) {
        if (typeof b2 == "number") {
          if (d2) {
            return;
          }
          d2 = true;
          c2(b2);
          return a2();
        }
        if (b2.tag) {
          d2 || c2(b2);
        } else {
          var e = b2[0];
          c2(l(0, [
            function(c3) {
              if (!d2) {
                return c3 ? (d2 = true, e(c3), a2()) : e(c3);
              }
            }
          ]));
        }
      });
    };
  };
}
function onStart$1(a2) {
  return function(b) {
    return function(c2) {
      return b(function(b2) {
        typeof b2 == "number" ? c2(b2) : b2.tag ? c2(b2) : (c2(b2), a2());
      });
    };
  };
}
function publish$1(a2) {
  return N(O)(a2);
}
function scan$1(a2, b) {
  return function(a3, b2) {
    return function(c2) {
      return function(d2) {
        let e = b2;
        return c2(function(c3) {
          typeof c3 == "number" ? c3 = 0 : c3.tag ? (e = a3(e, c3[0]), c3 = l(1, [e])) : c3 = l(0, [c3[0]]);
          d2(c3);
        });
      };
    };
  }(a2, b);
}
function share$1(a2) {
  function b(a3) {
    typeof a3 == "number" ? (c2.forEach(J), c2 = []) : a3.tag ? (e = false, c2.forEach(function(b2) {
      b2(a3);
    })) : d2 = a3[0];
  }
  let c2 = [], d2 = m, e = false;
  return function(f2) {
    function g2(a3) {
      return a3 !== f2;
    }
    c2 = c2.concat(f2);
    c2.length === 1 && a2(b);
    f2(l(0, [
      function(a3) {
        if (a3) {
          if (c2 = c2.filter(g2), c2.length === 0) {
            return d2(1);
          }
        } else {
          e || (e = true, d2(a3));
        }
      }
    ]));
  };
}
function take$1(a2) {
  return function(b) {
    return function(c2) {
      let d2 = false, e = 0, f2 = m;
      b(function(b2) {
        typeof b2 == "number" ? d2 || (d2 = true, c2(0)) : b2.tag ? e < a2 && !d2 && (e = e + 1 | 0, c2(b2), !d2 && e >= a2 && (d2 = true, c2(0), f2(1))) : (b2 = b2[0], 0 >= a2 ? (d2 = true, c2(0), b2(1)) : f2 = b2);
      });
      c2(l(0, [
        function(b2) {
          if (!d2) {
            if (b2) {
              return d2 = true, f2(1);
            }
            if (e < a2) {
              return f2(0);
            }
          }
        }
      ]));
    };
  };
}
function takeUntil$1(a2) {
  return function(b) {
    return function(c2) {
      function d2(a3) {
        typeof a3 != "number" && (a3.tag ? (e = true, f2(1), c2(0)) : (g2 = a3 = a3[0], a3(0)));
      }
      let e = false, f2 = m, g2 = m;
      b(function(b2) {
        typeof b2 == "number" ? e || (e = true, g2(1), c2(0)) : b2.tag ? e || c2(b2) : (f2 = b2[0], a2(d2));
      });
      c2(l(0, [
        function(a3) {
          if (!e) {
            return a3 ? (e = true, f2(1), g2(1)) : f2(0);
          }
        }
      ]));
    };
  };
}
function toPromise$1(a2) {
  return new Promise(function(b) {
    M(1)(a2)(function(a3) {
      if (typeof a3 != "number") {
        if (a3.tag) {
          b(a3[0]);
        } else {
          a3[0](0);
        }
      }
    });
  });
}
var v = [];
var P = typeof Symbol == "function" ? Symbol.observable || (Symbol.observable = Symbol("observable")) : "@@observable";

// node_modules/@urql/core/dist/01e1547d.mjs
function rehydrateGraphQlError(r2) {
  if (typeof r2 == "string") {
    return new GraphQLError(r2);
  } else if (typeof r2 == "object" && r2.message) {
    return new GraphQLError(r2.message, r2.nodes, r2.source, r2.positions, r2.path, r2, r2.extensions || {});
  } else {
    return r2;
  }
}
var a = function(e) {
  function CombinedError(r2) {
    var t2 = r2.networkError;
    var n = r2.response;
    var o = (r2.graphQLErrors || []).map(rehydrateGraphQlError);
    var a2 = function generateErrorMessage(e2, r3) {
      var t3 = "";
      if (e2 !== void 0) {
        return t3 = "[Network] " + e2.message;
      }
      if (r3 !== void 0) {
        r3.forEach(function(e3) {
          t3 += "[GraphQL] " + e3.message + "\n";
        });
      }
      return t3.trim();
    }(t2, o);
    e.call(this, a2);
    this.name = "CombinedError";
    this.message = a2;
    this.graphQLErrors = o;
    this.networkError = t2;
    this.response = n;
  }
  if (e) {
    CombinedError.__proto__ = e;
  }
  (CombinedError.prototype = Object.create(e && e.prototype)).constructor = CombinedError;
  CombinedError.prototype.toString = function toString() {
    return this.message;
  };
  return CombinedError;
}(Error);
function phash(e, r2) {
  e |= 0;
  for (var t2 = 0, n = 0 | r2.length; t2 < n; t2++) {
    e = (e << 5) + e + r2.charCodeAt(t2);
  }
  return e;
}
function hash(e) {
  return phash(5381, e) >>> 0;
}
var i = new Set();
var s = new WeakMap();
function stringify(e) {
  if (e === null || i.has(e)) {
    return "null";
  } else if (typeof e != "object") {
    return JSON.stringify(e) || "";
  } else if (e.toJSON) {
    return stringify(e.toJSON());
  } else if (Array.isArray(e)) {
    var r2 = "[";
    for (var t2 = 0, n = e.length; t2 < n; t2++) {
      if (t2 > 0) {
        r2 += ",";
      }
      var o = stringify(e[t2]);
      r2 += o.length > 0 ? o : "null";
    }
    return r2 += "]";
  }
  var a2 = Object.keys(e).sort();
  if (!a2.length && e.constructor && e.constructor !== Object) {
    var u3 = s.get(e) || Math.random().toString(36).slice(2);
    s.set(e, u3);
    return '{"__key":"' + u3 + '"}';
  }
  i.add(e);
  var f2 = "{";
  for (var c2 = 0, l3 = a2.length; c2 < l3; c2++) {
    var h2 = a2[c2];
    var p2 = stringify(e[h2]);
    if (p2) {
      if (f2.length > 1) {
        f2 += ",";
      }
      f2 += stringify(h2) + ":" + p2;
    }
  }
  i.delete(e);
  return f2 += "}";
}
function stringifyVariables(e) {
  i.clear();
  return stringify(e);
}
function stringifyDocument(e) {
  var r2 = (typeof e != "string" ? e.loc && e.loc.source.body || print(e) : e).replace(/([\s,]|#[^\n\r]+)+/g, " ").trim();
  if (typeof e != "string") {
    var t2 = "definitions" in e && getOperationName(e);
    if (t2) {
      r2 = "# " + t2 + "\n" + r2;
    }
    if (!e.loc) {
      e.loc = {
        start: 0,
        end: r2.length,
        source: {
          body: r2,
          name: "gql",
          locationOffset: {
            line: 1,
            column: 1
          }
        }
      };
    }
  }
  return r2;
}
var u2 = new Map();
function keyDocument(e) {
  var r2;
  var n;
  if (typeof e == "string") {
    r2 = hash(stringifyDocument(e));
    n = u2.get(r2) || parse(e, {
      noLocation: true
    });
  } else {
    r2 = e.__key || hash(stringifyDocument(e));
    n = u2.get(r2) || e;
  }
  if (!n.loc) {
    stringifyDocument(n);
  }
  n.__key = r2;
  u2.set(r2, n);
  return n;
}
function createRequest(e, r2) {
  if (!r2) {
    r2 = {};
  }
  var t2 = keyDocument(e);
  return {
    key: phash(t2.__key, stringifyVariables(r2)) >>> 0,
    query: t2,
    variables: r2
  };
}
function getOperationName(e) {
  for (var t2 = 0, n = e.definitions.length; t2 < n; t2++) {
    var o = e.definitions[t2];
    if (o.kind === Kind.OPERATION_DEFINITION && o.name) {
      return o.name.value;
    }
  }
}
function getOperationType(e) {
  for (var t2 = 0, n = e.definitions.length; t2 < n; t2++) {
    var o = e.definitions[t2];
    if (o.kind === Kind.OPERATION_DEFINITION) {
      return o.operation;
    }
  }
}
function _extends() {
  return (_extends = Object.assign || function(e) {
    for (var r2 = 1; r2 < arguments.length; r2++) {
      var t2 = arguments[r2];
      for (var n in t2) {
        if (Object.prototype.hasOwnProperty.call(t2, n)) {
          e[n] = t2[n];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}
function makeResult(e, r2, t2) {
  if (!("data" in r2) && !("errors" in r2) || "path" in r2) {
    throw new Error("No Content");
  }
  return {
    operation: e,
    data: r2.data,
    error: Array.isArray(r2.errors) ? new a({
      graphQLErrors: r2.errors,
      response: t2
    }) : void 0,
    extensions: typeof r2.extensions == "object" && r2.extensions || void 0,
    hasNext: !!r2.hasNext
  };
}
function mergeResultPatch(e, r2, t2) {
  var n = _extends({}, e);
  n.hasNext = !!r2.hasNext;
  if (!("path" in r2)) {
    if ("data" in r2) {
      n.data = r2.data;
    }
    return n;
  }
  if (Array.isArray(r2.errors)) {
    n.error = new a({
      graphQLErrors: n.error ? n.error.graphQLErrors.concat(r2.errors) : r2.errors,
      response: t2
    });
  }
  var o = n.data = _extends({}, n.data);
  var i2 = 0;
  var s2;
  while (i2 < r2.path.length) {
    o = o[s2 = r2.path[i2++]] = Array.isArray(o[s2]) ? [].concat(o[s2]) : _extends({}, o[s2]);
  }
  _extends(o, r2.data);
  return n;
}
function makeErrorResult(e, r2, t2) {
  return {
    operation: e,
    data: void 0,
    error: new a({
      networkError: r2,
      response: t2
    }),
    extensions: void 0
  };
}
function shouldUseGet(e) {
  return e.kind === "query" && !!e.context.preferGetMethod;
}
function makeFetchBody(e) {
  return {
    query: print(e.query),
    operationName: getOperationName(e.query),
    variables: e.variables || void 0,
    extensions: void 0
  };
}
function makeFetchURL(e, r2) {
  var t2 = shouldUseGet(e);
  var n = e.context.url;
  if (!t2 || !r2) {
    return n;
  }
  var o = [];
  if (r2.operationName) {
    o.push("operationName=" + encodeURIComponent(r2.operationName));
  }
  if (r2.query) {
    o.push("query=" + encodeURIComponent(r2.query.replace(/#[^\n\r]+/g, " ").trim()));
  }
  if (r2.variables) {
    o.push("variables=" + encodeURIComponent(stringifyVariables(r2.variables)));
  }
  if (r2.extensions) {
    o.push("extensions=" + encodeURIComponent(stringifyVariables(r2.extensions)));
  }
  return n + "?" + o.join("&");
}
function makeFetchOptions(e, r2) {
  var t2 = shouldUseGet(e);
  var n = typeof e.context.fetchOptions == "function" ? e.context.fetchOptions() : e.context.fetchOptions || {};
  return _extends({}, n, {
    body: !t2 && r2 ? JSON.stringify(r2) : void 0,
    method: t2 ? "GET" : "POST",
    headers: t2 ? n.headers : _extends({}, {
      "content-type": "application/json"
    }, n.headers)
  });
}
var f = typeof Symbol != "undefined" ? Symbol.asyncIterator : null;
var c = typeof TextDecoder != "undefined" ? new TextDecoder() : null;
var l2 = /content-type:[^\r\n]*application\/json/i;
var h = /boundary="?([^=";]+)"?/i;
function executeIncrementalFetch(e, r2, t2) {
  var n = t2.headers && t2.headers.get("Content-Type") || "";
  if (!/multipart\/mixed/i.test(n)) {
    return t2.json().then(function(n2) {
      e(makeResult(r2, n2, t2));
    });
  }
  var o = "---";
  var a2 = n.match(h);
  if (a2) {
    o = "--" + a2[1];
  }
  var i2;
  var cancel = function() {
  };
  if (f && t2[f]) {
    var s2 = t2[f]();
    i2 = s2.next.bind(s2);
  } else if ("body" in t2 && t2.body) {
    var u3 = t2.body.getReader();
    cancel = u3.cancel.bind(u3);
    i2 = u3.read.bind(u3);
  } else {
    throw new TypeError("Streaming requests unsupported");
  }
  var p2 = "";
  var d2 = true;
  var m2 = null;
  var v2 = null;
  return i2().then(function next(n2) {
    if (!n2.done) {
      var a3 = function toString(e2) {
        return e2.constructor.name === "Buffer" ? e2.toString() : c.decode(e2);
      }(n2.value);
      var s3 = a3.indexOf(o);
      if (s3 > -1) {
        s3 += p2.length;
      } else {
        s3 = p2.indexOf(o);
      }
      p2 += a3;
      while (s3 > -1) {
        var u4 = p2.slice(0, s3);
        var f2 = p2.slice(s3 + o.length);
        if (d2) {
          d2 = false;
        } else {
          var h2 = u4.indexOf("\r\n\r\n") + 4;
          var g2 = u4.slice(0, h2);
          var y2 = u4.slice(h2, u4.lastIndexOf("\r\n"));
          var x2 = void 0;
          if (l2.test(g2)) {
            try {
              x2 = JSON.parse(y2);
              m2 = v2 = v2 ? mergeResultPatch(v2, x2, t2) : makeResult(r2, x2, t2);
            } catch (e2) {
            }
          }
          if (f2.slice(0, 2) === "--" || x2 && !x2.hasNext) {
            if (!v2) {
              return e(makeResult(r2, {}, t2));
            }
            break;
          }
        }
        s3 = (p2 = f2).indexOf(o);
      }
    }
    if (m2) {
      e(m2);
      m2 = null;
    }
    if (!n2.done && (!v2 || v2.hasNext)) {
      return i2().then(next);
    }
  }).finally(cancel);
}
function makeFetchSource(e, r2, t2) {
  var n = t2.redirect === "manual" ? 400 : 300;
  var a2 = e.context.fetch;
  return make$1(function(o) {
    var i2 = o.next;
    var s2 = o.complete;
    var u3 = typeof AbortController != "undefined" ? new AbortController() : null;
    if (u3) {
      t2.signal = u3.signal;
    }
    var f2 = false;
    var c2 = false;
    var l3;
    Promise.resolve().then(function() {
      if (f2) {
        return;
      }
      return (a2 || fetch)(r2, t2);
    }).then(function(r3) {
      if (!r3) {
        return;
      }
      c2 = (l3 = r3).status < 200 || l3.status >= n;
      return executeIncrementalFetch(i2, e, l3);
    }).then(s2).catch(function(r3) {
      if (r3.name !== "AbortError") {
        var t3 = makeErrorResult(e, c2 ? new Error(l3.statusText) : r3, l3);
        i2(t3);
        s2();
      }
    });
    return function() {
      f2 = true;
      if (u3) {
        u3.abort();
      }
    };
  });
}

// node_modules/@urql/core/dist/urql-core.mjs
function collectTypes(e, r2) {
  if (Array.isArray(e)) {
    for (var n = 0; n < e.length; n++) {
      collectTypes(e[n], r2);
    }
  } else if (typeof e == "object" && e !== null) {
    for (var t2 in e) {
      if (t2 === "__typename" && typeof e[t2] == "string") {
        r2[e[t2]] = 0;
      } else {
        collectTypes(e[t2], r2);
      }
    }
  }
  return r2;
}
function collectTypesFromResponse(e) {
  return Object.keys(collectTypes(e, {}));
}
var formatNode = function(e) {
  if (e.selectionSet && !e.selectionSet.selections.some(function(e2) {
    return e2.kind === Kind.FIELD && e2.name.value === "__typename" && !e2.alias;
  })) {
    return _extends({}, e, {
      selectionSet: _extends({}, e.selectionSet, {
        selections: e.selectionSet.selections.concat([{
          kind: Kind.FIELD,
          name: {
            kind: Kind.NAME,
            value: "__typename"
          }
        }])
      })
    });
  }
};
var Q = new Map();
function formatDocument(r2) {
  var n = keyDocument(r2);
  var a2 = Q.get(n.__key);
  if (!a2) {
    a2 = visit(n, {
      Field: formatNode,
      InlineFragment: formatNode
    });
    Object.defineProperty(a2, "__key", {
      value: n.__key,
      enumerable: false
    });
    Q.set(n.__key, a2);
  }
  return a2;
}
function maskTypename(e) {
  if (!e || typeof e != "object") {
    return e;
  }
  return Object.keys(e).reduce(function(r2, n) {
    var t2 = e[n];
    if (n === "__typename") {
      Object.defineProperty(r2, "__typename", {
        enumerable: false,
        value: t2
      });
    } else if (Array.isArray(t2)) {
      r2[n] = t2.map(maskTypename);
    } else if (t2 && typeof t2 == "object" && "__typename" in t2) {
      r2[n] = maskTypename(t2);
    } else {
      r2[n] = t2;
    }
    return r2;
  }, Array.isArray(e) ? [] : {});
}
function withPromise(e) {
  e.toPromise = function() {
    return toPromise$1(take$1(1)(filter$1(function(e2) {
      return !e2.stale && !e2.hasNext;
    })(e)));
  };
  return e;
}
function makeOperation(e, r2, n) {
  if (!n) {
    n = r2.context;
  }
  return {
    key: r2.key,
    query: r2.query,
    variables: r2.variables,
    kind: e,
    context: n
  };
}
function addMetadata(e, r2) {
  return makeOperation(e.kind, e, _extends({}, e.context, {
    meta: _extends({}, e.context.meta, r2)
  }));
}
function noop() {
}
function applyDefinitions(e, n, t2) {
  for (var a2 = 0; a2 < t2.length; a2++) {
    if (t2[a2].kind === Kind.FRAGMENT_DEFINITION) {
      var o = t2[a2].name.value;
      var i2 = stringifyDocument(t2[a2]);
      if (!e.has(o)) {
        e.set(o, i2);
        n.push(t2[a2]);
      } else if (e.get(o) !== i2) {
        console.warn("[WARNING: Duplicate Fragment] A fragment with name `" + o + "` already exists in this document.\nWhile fragment names may not be unique across your source, each name must be unique per document.");
      }
    } else {
      n.push(t2[a2]);
    }
  }
}
function gql() {
  var e = arguments;
  var n = new Map();
  var a2 = [];
  var o = [];
  var i2 = Array.isArray(arguments[0]) ? arguments[0][0] : arguments[0] || "";
  for (var u3 = 1; u3 < arguments.length; u3++) {
    var c2 = e[u3];
    if (c2 && c2.definitions) {
      o.push.apply(o, c2.definitions);
    } else {
      i2 += c2;
    }
    i2 += e[0][u3];
  }
  applyDefinitions(n, a2, keyDocument(i2).definitions);
  applyDefinitions(n, a2, o);
  return keyDocument({
    kind: Kind.DOCUMENT,
    definitions: a2
  });
}
function shouldSkip(e) {
  var r2 = e.kind;
  return r2 !== "mutation" && r2 !== "query";
}
function cacheExchange(e) {
  var r2 = e.forward;
  var n = e.client;
  var t2 = e.dispatchDebug;
  var a2 = new Map();
  var i2 = Object.create(null);
  function mapTypeNames(e2) {
    var r3 = makeOperation(e2.kind, e2);
    r3.query = formatDocument(e2.query);
    return r3;
  }
  function isOperationCached(e2) {
    var r3 = e2.context.requestPolicy;
    return e2.kind === "query" && r3 !== "network-only" && (r3 === "cache-only" || a2.has(e2.key));
  }
  return function(e2) {
    var u3 = share$1(e2);
    var c2 = map$1(function(e3) {
      var r3 = a2.get(e3.key);
      t2(_extends({}, {
        operation: e3
      }, r3 ? {
        type: "cacheHit",
        message: "The result was successfully retried from the cache"
      } : {
        type: "cacheMiss",
        message: "The result could not be retrieved from the cache"
      }));
      var i3 = _extends({}, r3, {
        operation: addMetadata(e3, {
          cacheOutcome: r3 ? "hit" : "miss"
        })
      });
      if (e3.context.requestPolicy === "cache-and-network") {
        i3.stale = true;
        reexecuteOperation(n, e3);
      }
      return i3;
    })(filter$1(function(e3) {
      return !shouldSkip(e3) && isOperationCached(e3);
    })(u3));
    var s2 = H(function(e3) {
      var r3 = e3.operation;
      if (!r3) {
        return;
      }
      var o = collectTypesFromResponse(e3.data).concat(r3.context.additionalTypenames || []);
      if (e3.operation.kind === "mutation") {
        var u4 = new Set();
        t2({
          type: "cacheInvalidation",
          message: "The following typenames have been invalidated: " + o,
          operation: r3,
          data: {
            typenames: o,
            response: e3
          },
          source: "cacheExchange"
        });
        for (var c3 = 0; c3 < o.length; c3++) {
          var s3 = o[c3];
          var f2 = i2[s3] || (i2[s3] = new Set());
          f2.forEach(function(e4) {
            u4.add(e4);
          });
          f2.clear();
        }
        u4.forEach(function(e4) {
          if (a2.has(e4)) {
            r3 = a2.get(e4).operation;
            a2.delete(e4);
            reexecuteOperation(n, r3);
          }
        });
      } else if (r3.kind === "query" && e3.data) {
        a2.set(r3.key, e3);
        for (var p2 = 0; p2 < o.length; p2++) {
          var l3 = o[p2];
          (i2[l3] || (i2[l3] = new Set())).add(r3.key);
        }
      }
    })(r2(filter$1(function(e3) {
      return e3.kind !== "query" || e3.context.requestPolicy !== "cache-only";
    })(map$1(function(e3) {
      return addMetadata(e3, {
        cacheOutcome: "miss"
      });
    })(merge$1([map$1(mapTypeNames)(filter$1(function(e3) {
      return !shouldSkip(e3) && !isOperationCached(e3);
    })(u3)), filter$1(function(e3) {
      return shouldSkip(e3);
    })(u3)])))));
    return merge$1([c2, s2]);
  };
}
function reexecuteOperation(e, r2) {
  return e.reexecuteOperation(makeOperation(r2.kind, r2, _extends({}, r2.context, {
    requestPolicy: "network-only"
  })));
}
var G = new Set();
function ssrExchange(e) {
  var r2 = !(!e || !e.staleWhileRevalidate);
  var n = !(!e || !e.includeExtensions);
  var t2 = {};
  var a2 = [];
  function invalidate(e2) {
    a2.push(e2.operation.key);
    if (a2.length === 1) {
      Promise.resolve().then(function() {
        var e3;
        while (e3 = a2.shift()) {
          t2[e3] = null;
        }
      });
    }
  }
  var ssr = function(a3) {
    var o = a3.client;
    var i2 = a3.forward;
    return function(a4) {
      var u3 = e && typeof e.isClient == "boolean" ? !!e.isClient : !o.suspense;
      var s2 = share$1(a4);
      var f2 = i2(filter$1(function(e2) {
        return !t2[e2.key] || !!t2[e2.key].hasNext;
      })(s2));
      var p2 = map$1(function(e2) {
        var a5 = function deserializeResult(e3, r3, n2) {
          return {
            operation: e3,
            data: r3.data ? JSON.parse(r3.data) : void 0,
            extensions: n2 && r3.extensions ? JSON.parse(r3.extensions) : void 0,
            error: r3.error ? new a({
              networkError: r3.error.networkError ? new Error(r3.error.networkError) : void 0,
              graphQLErrors: r3.error.graphQLErrors
            }) : void 0,
            hasNext: r3.hasNext
          };
        }(e2, t2[e2.key], n);
        if (r2 && !G.has(e2.key)) {
          a5.stale = true;
          G.add(e2.key);
          reexecuteOperation(o, e2);
        }
        return a5;
      })(filter$1(function(e2) {
        return !!t2[e2.key];
      })(s2));
      if (!u3) {
        f2 = H(function(e2) {
          var r3 = e2.operation;
          if (r3.kind !== "mutation") {
            var a5 = function serializeResult(e3, r4) {
              var n2 = e3.hasNext;
              var t3 = e3.data;
              var a6 = e3.extensions;
              var o2 = e3.error;
              var i3 = {};
              if (t3 !== void 0) {
                i3.data = JSON.stringify(t3);
              }
              if (r4 && a6 !== void 0) {
                i3.extensions = JSON.stringify(a6);
              }
              if (n2) {
                i3.hasNext = true;
              }
              if (o2) {
                i3.error = {
                  graphQLErrors: o2.graphQLErrors.map(function(e4) {
                    if (!e4.path && !e4.extensions) {
                      return e4.message;
                    }
                    return {
                      message: e4.message,
                      path: e4.path,
                      extensions: e4.extensions
                    };
                  })
                };
                if (o2.networkError) {
                  i3.error.networkError = "" + o2.networkError;
                }
              }
              return i3;
            }(e2, n);
            t2[r3.key] = a5;
          }
        })(f2);
      } else {
        p2 = H(invalidate)(p2);
      }
      return merge$1([f2, p2]);
    };
  };
  ssr.restoreData = function(e2) {
    for (var r3 in e2) {
      if (t2[r3] !== null) {
        t2[r3] = e2[r3];
      }
    }
  };
  ssr.extractData = function() {
    var e2 = {};
    for (var r3 in t2) {
      if (t2[r3] != null) {
        e2[r3] = t2[r3];
      }
    }
    return e2;
  };
  if (e && e.initialState) {
    ssr.restoreData(e.initialState);
  }
  return ssr;
}
function subscriptionExchange(e) {
  var r2 = e.forwardSubscription;
  var t2 = e.enableAllOperations;
  return function(e2) {
    var a2 = e2.client;
    var i2 = e2.forward;
    function isSubscriptionOperation(e3) {
      var r3 = e3.kind;
      return r3 === "subscription" || !!t2 && (r3 === "query" || r3 === "mutation");
    }
    return function(e3) {
      var t3 = share$1(e3);
      var u3 = D(function(e4) {
        var i3 = e4.key;
        var u4 = filter$1(function(e5) {
          return e5.kind === "teardown" && e5.key === i3;
        })(t3);
        return takeUntil$1(u4)(function createSubscriptionSource(e5) {
          var t4 = r2({
            key: e5.key.toString(36),
            query: print(e5.query),
            variables: e5.variables,
            context: _extends({}, e5.context)
          });
          return make$1(function(r3) {
            var n = r3.next;
            var o = r3.complete;
            var i4 = false;
            var u5;
            Promise.resolve().then(function() {
              if (i4) {
                return;
              }
              u5 = t4.subscribe({
                next: function(r4) {
                  return n(makeResult(e5, r4));
                },
                error: function(r4) {
                  return n(makeErrorResult(e5, r4));
                },
                complete: function() {
                  if (!i4) {
                    i4 = true;
                    if (e5.kind === "subscription") {
                      a2.reexecuteOperation(makeOperation("teardown", e5, e5.context));
                    }
                    o();
                  }
                }
              });
            });
            return function() {
              i4 = true;
              if (u5) {
                u5.unsubscribe();
              }
            };
          });
        }(e4));
      })(filter$1(isSubscriptionOperation)(t3));
      var c2 = i2(filter$1(function(e4) {
        return !isSubscriptionOperation(e4);
      })(t3));
      return merge$1([u3, c2]);
    };
  };
}
function debugExchange(e) {
  var r2 = e.forward;
  if (false) {
    return function(e2) {
      return r2(e2);
    };
  } else {
    return function(e2) {
      return H(function(e3) {
        return console.log("[Exchange debug]: Completed operation: ", e3);
      })(r2(H(function(e3) {
        return console.log("[Exchange debug]: Incoming operation: ", e3);
      })(e2)));
    };
  }
}
function dedupExchange(e) {
  var r2 = e.forward;
  var n = e.dispatchDebug;
  var t2 = new Set();
  function filterIncomingOperation(e2) {
    var r3 = e2.key;
    var a2 = e2.kind;
    if (a2 === "teardown") {
      t2.delete(r3);
      return true;
    }
    if (a2 !== "query" && a2 !== "subscription") {
      return true;
    }
    var o = t2.has(r3);
    t2.add(r3);
    if (o) {
      n({
        type: "dedup",
        message: "An operation has been deduped.",
        operation: e2,
        source: "dedupExchange"
      });
    }
    return !o;
  }
  function afterOperationResult(e2) {
    if (!e2.hasNext) {
      t2.delete(e2.operation.key);
    }
  }
  return function(e2) {
    var n2 = filter$1(filterIncomingOperation)(e2);
    return H(afterOperationResult)(r2(n2));
  };
}
function fetchExchange(e) {
  var r2 = e.forward;
  var n = e.dispatchDebug;
  return function(e2) {
    var t2 = share$1(e2);
    var a2 = D(function(e3) {
      var r3 = e3.key;
      var a3 = filter$1(function(e4) {
        return e4.kind === "teardown" && e4.key === r3;
      })(t2);
      var o2 = makeFetchBody(e3);
      var i2 = makeFetchURL(e3, o2);
      var u3 = makeFetchOptions(e3, o2);
      n({
        type: "fetchRequest",
        message: "A fetch request is being executed.",
        operation: e3,
        data: {
          url: i2,
          fetchOptions: u3
        },
        source: "fetchExchange"
      });
      return H(function(r4) {
        var t3 = !r4.data ? r4.error : void 0;
        n({
          type: t3 ? "fetchError" : "fetchSuccess",
          message: "A " + (t3 ? "failed" : "successful") + " fetch response has been returned.",
          operation: e3,
          data: {
            url: i2,
            fetchOptions: u3,
            value: t3 || r4
          },
          source: "fetchExchange"
        });
      })(takeUntil$1(a3)(makeFetchSource(e3, i2, u3)));
    })(filter$1(function(e3) {
      return e3.kind === "query" || e3.kind === "mutation";
    })(t2));
    var o = r2(filter$1(function(e3) {
      return e3.kind !== "query" && e3.kind !== "mutation";
    })(t2));
    return merge$1([a2, o]);
  };
}
function fallbackExchange(e) {
  var r2 = e.dispatchDebug;
  return function(e2) {
    return filter$1(function() {
      return false;
    })(H(function(e3) {
      if (e3.kind !== "teardown" && true) {
        var n = 'No exchange has handled operations of kind "' + e3.kind + `". Check whether you've added an exchange responsible for these operations.`;
        r2({
          type: "fallbackCatch",
          message: n,
          operation: e3,
          source: "fallbackExchange"
        });
        console.warn(n);
      }
    })(e2));
  };
}
var L = fallbackExchange({
  dispatchDebug: noop
});
function composeExchanges(e) {
  return function(r2) {
    var n = r2.client;
    var t2 = r2.dispatchDebug;
    return e.reduceRight(function(e2, r3) {
      return r3({
        client: n,
        forward: e2,
        dispatchDebug: function dispatchDebug$1(e3) {
          t2(_extends({}, {
            timestamp: Date.now(),
            source: r3.name
          }, e3));
        }
      });
    }, r2.forward);
  };
}
function errorExchange(e) {
  var r2 = e.onError;
  return function(e2) {
    var n = e2.forward;
    return function(e3) {
      return H(function(e4) {
        var n2 = e4.error;
        if (n2) {
          r2(n2, e4.operation);
        }
      })(n(e3));
    };
  };
}
var J2 = [dedupExchange, cacheExchange, fetchExchange];
var W = function Client(e) {
  if (!e.url) {
    throw new Error("You are creating an urql-client without a url.");
  }
  var r2 = new Map();
  var n = new Map();
  var t2 = [];
  var a2 = makeSubject$1();
  var i2 = a2.source;
  var u3 = a2.next;
  var c2 = false;
  function dispatchOperation(e2) {
    c2 = true;
    if (e2) {
      u3(e2);
    }
    while (e2 = t2.shift()) {
      u3(e2);
    }
    c2 = false;
  }
  function makeResultSource(e2) {
    var a3 = filter$1(function(r3) {
      return r3.operation.kind === e2.kind && r3.operation.key === e2.key;
    })(y2);
    if (f2.maskTypename) {
      a3 = map$1(function(e3) {
        return _extends({}, e3, {
          data: maskTypename(e3.data)
        });
      })(a3);
    }
    if (e2.kind === "mutation") {
      return take$1(1)(onStart$1(function() {
        return dispatchOperation(e2);
      })(a3));
    }
    return share$1(onEnd$1(function() {
      r2.delete(e2.key);
      n.delete(e2.key);
      for (var a4 = t2.length - 1; a4 >= 0; a4--) {
        if (t2[a4].key === e2.key) {
          t2.splice(a4, 1);
        }
      }
      dispatchOperation(makeOperation("teardown", e2, e2.context));
    })(H(function(n2) {
      r2.set(e2.key, n2);
    })(K(function(r3) {
      if (e2.kind !== "query" || r3.stale) {
        return fromValue$1(r3);
      }
      return merge$1([fromValue$1(r3), map$1(function() {
        return _extends({}, r3, {
          stale: true
        });
      })(take$1(1)(filter$1(function(r4) {
        return r4.kind === "query" && r4.key === e2.key && r4.context.requestPolicy !== "cache-only";
      })(i2)))]);
    })(takeUntil$1(filter$1(function(r3) {
      return r3.kind === "teardown" && r3.key === e2.key;
    })(i2))(a3)))));
  }
  var s2 = this instanceof Client ? this : Object.create(Client.prototype);
  var f2 = _extends(s2, {
    url: e.url,
    fetchOptions: e.fetchOptions,
    fetch: e.fetch,
    suspense: !!e.suspense,
    requestPolicy: e.requestPolicy || "cache-first",
    preferGetMethod: !!e.preferGetMethod,
    maskTypename: !!e.maskTypename,
    operations$: i2,
    reexecuteOperation: function reexecuteOperation2(e2) {
      if (e2.kind === "mutation" || n.has(e2.key)) {
        t2.push(e2);
        if (!c2) {
          Promise.resolve().then(dispatchOperation);
        }
      }
    },
    createOperationContext: function createOperationContext(e2) {
      if (!e2) {
        e2 = {};
      }
      return _extends({}, {
        url: f2.url,
        fetchOptions: f2.fetchOptions,
        fetch: f2.fetch,
        preferGetMethod: f2.preferGetMethod
      }, e2, {
        suspense: e2.suspense || e2.suspense !== false && f2.suspense,
        requestPolicy: e2.requestPolicy || f2.requestPolicy
      });
    },
    createRequestOperation: function createRequestOperation(e2, r3, n2) {
      var t3 = getOperationType(r3.query);
      if (e2 !== "teardown" && t3 !== e2) {
        throw new Error('Expected operation of type "' + e2 + '" but found "' + t3 + '"');
      }
      return makeOperation(e2, r3, f2.createOperationContext(n2));
    },
    executeRequestOperation: function executeRequestOperation(e2) {
      if (e2.kind === "mutation") {
        return makeResultSource(e2);
      }
      return make$1(function(t3) {
        var a3 = n.get(e2.key);
        if (!a3) {
          n.set(e2.key, a3 = makeResultSource(e2));
        }
        var i3 = e2.context.requestPolicy === "cache-and-network" || e2.context.requestPolicy === "network-only";
        return N(t3.next)(onEnd$1(t3.complete)(onStart$1(function() {
          var n2 = r2.get(e2.key);
          if (e2.kind === "subscription") {
            return dispatchOperation(e2);
          } else if (i3) {
            dispatchOperation(e2);
          }
          if (n2 != null && n2 === r2.get(e2.key)) {
            t3.next(i3 ? _extends({}, n2, {
              stale: true
            }) : n2);
          } else if (!i3) {
            dispatchOperation(e2);
          }
        })(a3))).unsubscribe;
      });
    },
    executeQuery: function executeQuery(e2, r3) {
      var n2 = f2.createRequestOperation("query", e2, r3);
      return f2.executeRequestOperation(n2);
    },
    executeSubscription: function executeSubscription(e2, r3) {
      var n2 = f2.createRequestOperation("subscription", e2, r3);
      return f2.executeRequestOperation(n2);
    },
    executeMutation: function executeMutation(e2, r3) {
      var n2 = f2.createRequestOperation("mutation", e2, r3);
      return f2.executeRequestOperation(n2);
    },
    query: function query2(e2, r3, n2) {
      if (!n2 || typeof n2.suspense != "boolean") {
        n2 = _extends({}, n2, {
          suspense: false
        });
      }
      return withPromise(f2.executeQuery(createRequest(e2, r3), n2));
    },
    readQuery: function readQuery(e2, r3, n2) {
      var t3 = null;
      N(function(e3) {
        t3 = e3;
      })(f2.query(e2, r3, n2)).unsubscribe();
      return t3;
    },
    subscription: function subscription2(e2, r3, n2) {
      return f2.executeSubscription(createRequest(e2, r3), n2);
    },
    mutation: function mutation2(e2, r3, n2) {
      return withPromise(f2.executeMutation(createRequest(e2, r3), n2));
    }
  });
  var p2 = noop;
  if (true) {
    var l3 = makeSubject$1();
    var d2 = l3.next;
    var h2 = l3.source;
    f2.subscribeToDebugTarget = function(e2) {
      return N(e2)(h2);
    };
    p2 = d2;
  }
  var v2 = composeExchanges(e.exchanges !== void 0 ? e.exchanges : J2);
  var y2 = share$1(v2({
    client: f2,
    dispatchDebug: p2,
    forward: fallbackExchange({
      dispatchDebug: p2
    })
  })(i2));
  publish$1(y2);
  return f2;
};
var z2 = W;

// node_modules/@urql/svelte/dist/urql-svelte.mjs
function _extends2() {
  return (_extends2 = Object.assign || function(e) {
    for (var t2 = 1; t2 < arguments.length; t2++) {
      var n = arguments[t2];
      for (var r2 in n) {
        if (Object.prototype.hasOwnProperty.call(n, r2)) {
          e[r2] = n[r2];
        }
      }
    }
    return e;
  }).apply(this, arguments);
}
var d = new WeakSet();
var y = true ? function(e) {
  return d.add(e);
} : function() {
  return;
};
function operationStore(n, i2, o) {
  var u3 = {
    query: n,
    variables: i2 || null,
    context: o
  };
  var a2 = {
    stale: false,
    fetching: false,
    data: void 0,
    error: void 0,
    extensions: void 0
  };
  var c2 = writable(a2);
  var s2 = false;
  a2.set = function set(n2) {
    if (!n2 || n2 === a2) {
      return;
    }
    s2 = true;
    if (true) {
      if (!d.has(n2)) {
        for (var r2 in n2) {
          if (!(r2 in u3)) {
            throw new TypeError("It is not allowed to update result properties on an OperationStore.");
          }
        }
      }
    }
    var i3 = false;
    if ("query" in n2 || "variables" in n2) {
      var o2 = createRequest(u3.query, u3.variables);
      var f3 = createRequest(n2.query || u3.query, n2.variables || u3.variables);
      if (o2.key !== f3.key) {
        i3 = true;
        u3.query = n2.query || u3.query;
        u3.variables = n2.variables || u3.variables || null;
      }
    }
    if ("context" in n2) {
      if (stringifyVariables(u3.context) !== stringifyVariables(n2.context)) {
        i3 = true;
        u3.context = n2.context;
      }
    }
    for (var l3 in n2) {
      if (l3 === "query" || l3 === "variables" || l3 === "context") {
        continue;
      } else if (l3 === "fetching") {
        a2[l3] = !!n2[l3];
      } else if (l3 in a2) {
        a2[l3] = n2[l3];
      }
      i3 = true;
    }
    a2.stale = !!n2.stale;
    s2 = false;
    if (i3) {
      c2.set(a2);
    }
  };
  a2.update = function update(e) {
    a2.set(e(a2));
  };
  a2.subscribe = function subscribe(e, t2) {
    return c2.subscribe(e, t2);
  };
  a2.reexecute = function(e) {
    u3.context = _extends2({}, e || u3.context);
    c2.set(a2);
  };
  Object.keys(u3).forEach(function(e) {
    Object.defineProperty(a2, e, {
      configurable: false,
      get: function() {
        return u3[e];
      },
      set: function set(t2) {
        u3[e] = t2;
        if (!s2) {
          c2.set(a2);
        }
      }
    });
  });
  if (true) {
    var f2 = _extends2({}, a2);
    Object.keys(a2).forEach(function(e) {
      Object.defineProperty(f2, e, {
        configurable: false,
        get: function get() {
          return a2[e];
        },
        set: function set() {
          throw new TypeError("It is not allowed to update result properties on an OperationStore.");
        }
      });
    });
    Object.keys(u3).forEach(function(e) {
      Object.defineProperty(f2, e, {
        configurable: false,
        get: function() {
          return u3[e];
        },
        set: function set(t2) {
          u3[e] = t2;
          if (!s2) {
            c2.set(a2);
          }
        }
      });
    });
    return f2;
  }
  return a2;
}
function getClient() {
  return getContext("$$_urql");
}
function setClient(e) {
  setContext("$$_urql", e);
}
function initClient(e) {
  var t2 = new W(e);
  setClient(t2);
  return t2;
}
var g = {
  fetching: false,
  stale: false,
  error: void 0,
  data: void 0,
  extensions: void 0
};
function toSource(t2) {
  return make$1(function(n) {
    var r2;
    var i2 = {};
    return t2.subscribe(function(t3) {
      var o = createRequest(t3.query, t3.variables);
      if ((o.context = t3.context) !== i2 || o.key !== r2) {
        r2 = o.key;
        i2 = t3.context;
        n.next(o);
      }
    });
  });
}
function query(e) {
  var t2 = getClient();
  var n = N(function(t3) {
    y(t3);
    e.set(t3);
  })(scan$1(function(e2, t3) {
    return _extends2({}, e2, t3);
  }, g)(K(function(e2) {
    if (e2.context && e2.context.pause) {
      return fromValue$1({
        fetching: false,
        stale: false
      });
    }
    return concat$1([fromValue$1({
      fetching: true,
      stale: false
    }), map$1(function(e3) {
      return _extends2({}, {
        fetching: false
      }, e3, {
        stale: !!e3.stale
      });
    })(t2.executeQuery(e2, e2.context)), fromValue$1({
      fetching: false,
      stale: false
    })]);
  })(toSource(e))));
  onDestroy(n.unsubscribe);
  return e;
}
function subscription(e, t2) {
  var n = getClient();
  var r2 = N(function(t3) {
    y(t3);
    e.set(t3);
  })(scan$1(function(e2, n2) {
    return _extends2({}, e2, n2, {
      data: n2.data !== void 0 ? typeof t2 == "function" ? t2(e2.data, n2.data) : n2.data : e2.data,
      stale: false
    });
  }, g)(K(function(t3) {
    if (t3.context && t3.context.pause) {
      return fromValue$1({
        fetching: false
      });
    }
    return concat$1([fromValue$1({
      fetching: true
    }), n.executeSubscription(t3, e.context), fromValue$1({
      fetching: false
    })]);
  })(toSource(e))));
  onDestroy(r2.unsubscribe);
  return e;
}
function mutation(t2) {
  var n = getClient();
  var r2 = typeof t2.subscribe != "function" ? operationStore(t2.query, t2.variables) : t2;
  return function(t3, i2) {
    var o = {
      fetching: true,
      variables: t3 || r2.variables,
      context: i2 || r2.context
    };
    y(o);
    r2.set(o);
    return toPromise$1(take$1(1)(n.executeMutation(createRequest(r2.query, r2.variables || {}), r2.context))).then(function(e) {
      var t4 = _extends2({}, {
        fetching: false
      }, e);
      y(t4);
      r2.set(t4);
      return r2;
    });
  };
}
export {
  W as Client,
  a as CombinedError,
  cacheExchange,
  composeExchanges,
  z2 as createClient,
  createRequest,
  debugExchange,
  dedupExchange,
  J2 as defaultExchanges,
  errorExchange,
  L as fallbackExchangeIO,
  fetchExchange,
  formatDocument,
  getClient,
  getOperationName,
  gql,
  initClient,
  makeErrorResult,
  makeOperation,
  makeResult,
  maskTypename,
  mergeResultPatch,
  mutation,
  operationStore,
  query,
  setClient,
  ssrExchange,
  stringifyVariables,
  subscription,
  subscriptionExchange
};
//# sourceMappingURL=@urql_svelte.js.map
